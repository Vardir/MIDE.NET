<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:MIDE.WPFApp.Controls"
                    xmlns:api="clr-namespace:MIDE.API.Components;assembly=api"
                    xmlns:c="clr-namespace:MIDE.WPFApp.ValueConverters"
                    xmlns:ctr="clr-namespace:MIDE.WPFApp.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Texts.xaml"/>
        <ResourceDictionary Source="Colors.xaml"/>
        <ResourceDictionary Source="Fonts.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <Style TargetType="{x:Type local:Resizer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Resizer}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type local:ResizablePanel}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ResizablePanel}">
                    <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="5"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="5"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="5"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="5"/>
                        </Grid.RowDefinitions>
                        
                        <!--<local:Resizer Cursor="SizeNWSE" Background="DarkBlue" Width="3" Height="3"
                                              Grid.Row="0" Grid.Column="0" ThumbDirection="TopLeft"/>-->

                        <local:Resizer Cursor="SizeWE" Background="DarkBlue" Width="3" 
                                              Grid.Row="1" Grid.Column="0" ThumbDirection="Left"/>

                        <!--<local:Resizer Cursor="SizeNESW" Background="DarkBlue" Width="3" Height="3" 
                                              Grid.Row="2" Grid.Column="0" ThumbDirection="BottomLeft" />-->

                        <local:Resizer Cursor="SizeNS" Background="DarkBlue" Height="3" 
                                              Grid.Row="2" Grid.Column="1" ThumbDirection="Bottom" />

                        <!--<local:Resizer Cursor="SizeNWSE" Background="DarkBlue" Width="3" Height="3" 
                                              Grid.Row="2" Grid.Column="2" ThumbDirection="BottomRight" />-->

                        <local:Resizer Cursor="SizeWE" Background="DarkBlue" Width="3"  
                                              Grid.Row="1" Grid.Column="2" ThumbDirection="Right"/>

                        <!--<local:Resizer Cursor="SizeNESW" Background="DarkBlue" Width="3" Height="3" 
                                              Grid.Row="0" Grid.Column="2" ThumbDirection="TopRight"/>-->

                        <local:Resizer Cursor="SizeNS" Background="DarkBlue"  Height="3" 
                                              Grid.Row="0" Grid.Column="1" ThumbDirection="Top"/>

                        <ContentPresenter Grid.Row="1" Grid.Column="1" Content="{TemplateBinding Content}" 
                                             Margin="{TemplateBinding Padding}"></ContentPresenter>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Control}" x:Key="BasePanel" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{StaticResource PanelBackground}"/>
    </Style>
    
    <Style TargetType="{x:Type ItemsControl}" x:Key="ToolBar" BasedOn="{StaticResource BasePanel}">
    </Style>
    <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource BasePanel}">
    </Style>
    <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource BasePanel}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundUltraLightBrush}"/>
    </Style>
    <Style TargetType="{x:Type StatusBar}" BasedOn="{StaticResource BasePanel}">
    </Style>

    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{StaticResource PanelBackground}"/>
    </Style>


    <!--MENU-->
    <!--Separator-->
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderThickness="1" BorderBrush="{StaticResource BackgroundLightBrush}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1" BorderBrush="{StaticResource BackgroundLightBrush}">
            <Grid Background="{StaticResource BackgroundDarkBrush}">
                <ContentPresenter Margin="6,3,6,3"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <Popup x:Name="Popup"
                       Placement="Bottom"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True"
                       Focusable="False"
                       PopupAnimation="Fade">
                    <!--Menu top-level stack-->
                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            BorderThickness="1" BorderBrush="{StaticResource BackgroundLightBrush}"
                            Background="{StaticResource BackgroundDarkBrush}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" TargetName="Border" Value="{StaticResource BackgroundSemiLightBrush}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource BackgroundSemiLightBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem == items that are placed horizontally in top-level of menu -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border">
            <ContentPresenter Margin="6,3,6,3" HorizontalAlignment="Stretch"
                              ContentSource="Header" RecognizesAccessKey="True" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{StaticResource BackgroundSemiLightBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource BackgroundLightBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1"
                Padding="0 0 50 0" HorizontalAlignment="Stretch">
            <Grid HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                                  Margin="6,0,6,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon" />
                <Border x:Name="Check"
                        Width="13" Height="13"
                        Visibility="Collapsed"
                        Margin="6,0,6,0"
                        BorderThickness="1" BorderBrush="{StaticResource BackgroundNormalBrush}"
                        Background="{StaticResource BackgroundDarkBrush}">
                    <!--Arrow for sub-items stack-->
                    <Path x:Name="CheckMark"
                          Width="7" Height="7"
                          Visibility="Hidden"
                          SnapsToDevicePixels="False"
                          StrokeThickness="2"
                          Data="M 0 0 L 7 7 M 0 7 L 7 0"
                          Fill="{StaticResource BackgroundLightBrush}"/>
                </Border>
                <ContentPresenter x:Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"
                                  HorizontalAlignment="Stretch"/>
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,0,2"
                           DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{StaticResource BackgroundSemiLightBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Sub menu header-->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                                  Margin="6,0,6,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon" />
                <ContentPresenter x:Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,2,2"
                           DockPanel.Dock="Right" />
                <!--Arrow for sub-items stack-->
                <Path Grid.Column="3"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0 0 L 0 7 L 4 3.5 Z"
                      Fill="{StaticResource BackgroundLightBrush}"/>
                <Popup x:Name="Popup"
                        Placement="Right"
                        IsOpen="{TemplateBinding IsSubmenuOpen}"
                        AllowsTransparency="True"
                        Focusable="False"
                        PopupAnimation="Fade">
                    <!--Child items stack-->
                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            Background="{StaticResource BackgroundDarkBrush}"
                            BorderThickness="1" BorderBrush="{StaticResource BackgroundNormalBrush}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{StaticResource BackgroundNormalBrush}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource BackgroundSemiLightBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->
    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--MENU-->
        
    <!--API Controls-->
    <DataTemplate DataType="{x:Type api:Button}">
        <Button Margin="{Binding Margin, Converter={c:MeasurementsConverter}}" 
                Padding="{Binding Padding, Converter={c:MeasurementsConverter}}"
                Height="{Binding Height, Converter={c:MeasurementsConverter}}"
                Width="{Binding Width, Converter={c:MeasurementsConverter}}"
                IsEnabled="{Binding IsEnabled}"
                Content="{Binding Caption}">
            <!--<StackPanel Orientation="Horizontal">
                <ContentPresenter Content="{Binding ButtonGlyph}" Margin="0 0 5 0"/>
                <TextBlock Text="{Binding Caption}"
                           FontFamily="{Binding FontFamily, RelativeSource={RelativeSource AncestorType=Button}}"
                           FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType=Button}}"
                           FontStretch="{Binding FontStretch, RelativeSource={RelativeSource AncestorType=Button}}"
                           FontStyle="{Binding FontStyle, RelativeSource={RelativeSource AncestorType=Button}}"
                           FontWeight="{Binding FontWeight, RelativeSource={RelativeSource AncestorType=Button}}"/>
            </StackPanel>-->
        </Button>
    </DataTemplate>
    <DataTemplate DataType="{x:Type api:CheckBox}">
        <CheckBox Margin="{Binding Margin, Converter={c:MeasurementsConverter}}" 
                  Padding="{Binding Padding, Converter={c:MeasurementsConverter}}"
                  Height="{Binding Height, Converter={c:MeasurementsConverter}}"
                  Width="{Binding Width, Converter={c:MeasurementsConverter}}"
                  IsChecked="{Binding IsChecked}"
                  IsEnabled="{Binding IsEnabled}"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type api:GridLayout}">
        <ctr:Grid Layout="{Binding}"></ctr:Grid>
    </DataTemplate>
    <DataTemplate DataType="{x:Type api:Label}">
        <TextBlock Margin="{Binding Margin, Converter={c:MeasurementsConverter}}" 
                   Padding="{Binding Padding, Converter={c:MeasurementsConverter}}"
                   Height="{Binding Height, Converter={c:MeasurementsConverter}}"
                   Width="{Binding Width, Converter={c:MeasurementsConverter}}"
                   IsEnabled="{Binding IsEnabled}"
                   Text="{Binding Text}"
                   Style="{StaticResource DefaultTextBlock}"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type api:RadioButton}">
        <RadioButton Margin="{Binding Margin, Converter={c:MeasurementsConverter}}" 
                     Padding="{Binding Padding, Converter={c:MeasurementsConverter}}"
                     Height="{Binding Height, Converter={c:MeasurementsConverter}}"
                     Width="{Binding Width, Converter={c:MeasurementsConverter}}"
                     IsEnabled="{Binding IsEnabled}"
                     IsChecked="{Binding IsChecked}"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type api:TextBox}">
        <TextBox Margin="{Binding Margin, Converter={c:MeasurementsConverter}}" 
                 Padding="{Binding Padding, Converter={c:MeasurementsConverter}}"
                 Height="{Binding Height, Converter={c:MeasurementsConverter}}"
                 Width="{Binding Width, Converter={c:MeasurementsConverter}}"
                 IsEnabled="{Binding IsEnabled}"
                 Text="{Binding Text}"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type api:Panel}">
        <ItemsControl ItemsSource="{Binding Children}"
                      Margin="{Binding Margin, Converter={c:MeasurementsConverter}}" 
                      Padding="{Binding Padding, Converter={c:MeasurementsConverter}}"
                      Height="{Binding Height, Converter={c:MeasurementsConverter}}"
                      Width="{Binding Width, Converter={c:MeasurementsConverter}}"
                      IsEnabled="{Binding IsEnabled}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </DataTemplate>
    <DataTemplate DataType="{x:Type api:StackPanel}">
        <ItemsControl ItemsSource="{Binding Children}"
                      Margin="{Binding Margin, Converter={c:MeasurementsConverter}}" 
                      Padding="{Binding Padding, Converter={c:MeasurementsConverter}}"
                      Height="{Binding Height, Converter={c:MeasurementsConverter}}"
                      Width="{Binding Width, Converter={c:MeasurementsConverter}}"
                      IsEnabled="{Binding IsEnabled}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="{Binding Orientation, Converter={c:OrientationConverter}}"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </DataTemplate>
    <!--API Control-->
</ResourceDictionary>