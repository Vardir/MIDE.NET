<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MIDE.WPFApp.ValueConverters"
                    xmlns:ctr="clr-namespace:MIDE.WPFApp.Controls"
                    xmlns:ctrapi="clr-namespace:MIDE.API.Components;assembly=api"
                    xmlns:conv="clr-namespace:MIDE.WPFApp.ValueConverters"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:MIDE.WPFApp.Styles">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml"/>
        <ResourceDictionary Source="Fonts.xaml"/>
        <ResourceDictionary Source="Shared.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <Style TargetType="{x:Type Control}" x:Key="BasePanel" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{DynamicResource Panel_Background_Brush}"/>
    </Style>
    
    <Style TargetType="{x:Type StatusBar}" BasedOn="{StaticResource BasePanel}">
    </Style>
    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource Panel_Background_Brush}"/>
    </Style>

    <Style x:Key="VerticalDotsThumb" TargetType="{x:Type Thumb}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}" 
                            Background="Transparent" SnapsToDevicePixels="true">
                        <Rectangle>
                            <Shape.Fill>
                                <DrawingBrush Viewbox="0,0,4,4" Viewport="0,0,4,4" 
                                              TileMode="Tile" ViewportUnits="Absolute"
                                              ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <DrawingGroup.Children>
                                                <GeometryDrawing Brush="{DynamicResource Thumb_Brush}" 
                                                                 Geometry="M 1,1 L 1,3 3,3 3,1 Z"/>
                                                <GeometryDrawing Brush="{DynamicResource Panel_Background_Brush}" 
                                                                 Geometry="M 0,0 L 0,2 2,2 2,0 Z"/>
                                            </DrawingGroup.Children>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Shape.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Property="FrameworkElement.Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--MENU-->
    <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource BasePanel}">
        <Setter Property="Foreground" Value="{DynamicResource Menu_Foreground_Brush}"/>
        <Setter Property="Background" Value="{DynamicResource Menu_Background_Brush}"/>
        <Setter Property="AlternationCount" Value="{Binding RelativeSource={RelativeSource Self}, Path=Items.Count}"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type MenuItem}">
                    <Setter Property="Command" Value="{Binding PressCommand, Converter={c:RelayCommandConverter}}" />
                    <Setter Property="AlternationCount" Value="{Binding RelativeSource={RelativeSource Self}, Path=Items.Count}"/>

                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Converter={conv:ExtractType}}" Value="MenuGroup">
                            <Setter Property="Tag" Value="Group"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Menu">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type MenuItem}" x:Key="GroupStyle">
                            <Style.Triggers>
                                <DataTrigger Value="True">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{conv:CountEqualityConverter}">
                                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}" Path="Items.Count" />
                                            <Binding RelativeSource="{RelativeSource Self}" Path="(ItemsControl.AlternationIndex)" />
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <Setter Property="Background" Value="Red"/>
                                </DataTrigger>
                                <DataTrigger Value="True">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{conv:IntegerEqualityConverter}">
                                            <Binding RelativeSource="{RelativeSource Self}" Path="(ItemsControl.AlternationIndex)"/>
                                            <Binding>
                                                <Binding.Source>
                                                    <sys:Int32>0</sys:Int32>
                                                </Binding.Source>
                                            </Binding>
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <Setter Property="Background" Value="Blue"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                        
                        <HierarchicalDataTemplate DataType="{x:Type ctrapi:MenuButton}"
                                                  ItemsSource="{Binding Children}">
                            <TextBlock Text="{Binding Caption}"
                                       Foreground="{DynamicResource Menu_Foreground_Brush}"/>
                        </HierarchicalDataTemplate>
                        <HierarchicalDataTemplate DataType="{x:Type ctrapi:MenuGroup}">
                            <TextBlock Text="FFF"/>
                        </HierarchicalDataTemplate>
                    </ControlTemplate.Resources>

                    <Border Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderThickness="1" BorderBrush="{DynamicResource Menu_Separator_Brush}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1" 
                BorderBrush="{DynamicResource Menu_Border_Brush}">
            <Grid Background="{DynamicResource Menu_Background_Brush}">
                <ContentPresenter Margin="6,3,6,3"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <Popup x:Name="Popup"
                       Placement="Bottom"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True"
                       Focusable="False"
                       PopupAnimation="Fade">
                    <!--Menu top-level stack-->
                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            BorderThickness="1" BorderBrush="{DynamicResource Menu_Border_Brush}"
                            Background="{DynamicResource Menu_ItemBackground_Brush}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource Menu_ItemBackgroundHovered_Brush}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Menu_ItemBackgroundDisabled_Brush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border">
            <ContentPresenter Margin="6,3,6,3" HorizontalAlignment="Stretch"
                              ContentSource="Header" RecognizesAccessKey="True" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="Border" 
                        Value="{DynamicResource Menu_ItemBackgroundHovered_Brush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Menu_ItemBackgroundDisabled_Brush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1"
                Padding="0 0 50 0" HorizontalAlignment="Stretch">
            <Grid HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                                  Margin="6,0,6,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon" />
                <Border x:Name="Check"
                        Width="13" Height="13"
                        Visibility="Collapsed"
                        Margin="6,0,6,0"
                        BorderThickness="1" BorderBrush="{DynamicResource Menu_Border_Brush}"
                        Background="{DynamicResource Menu_ItemBackground_Brush}">
                    <!--Arrow for sub-items stack-->
                    <Path x:Name="CheckMark"
                          Width="7" Height="7"
                          Visibility="Hidden"
                          SnapsToDevicePixels="False"
                          StrokeThickness="2"
                          Data="M 0 0 L 7 7 M 0 7 L 7 0"
                          Fill="{DynamicResource Menu_Arrow_Brush}"/>
                </Border>
                
                <ContentPresenter x:Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"
                                  HorizontalAlignment="Stretch"/>
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,0,2"
                           DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" 
                        Value="{DynamicResource Menu_ItemBackgroundHovered_Brush}"/>
                <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource Menu_ArrowHovered_Brush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource Menu_ItemBackgroundDisabled_Brush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SubmenuGroupItemTemplateKey" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1" Background="Red"
                Padding="0 0 50 0" HorizontalAlignment="Stretch">
            <Grid HorizontalAlignment="Stretch">
                <ContentPresenter x:Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"
                                  HorizontalAlignment="Stretch"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                                  Margin="6,0,6,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon" />
                <ContentPresenter x:Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,2,2"
                           DockPanel.Dock="Right" />
                <!--Arrow for sub-items stack-->
                <Path Grid.Column="3"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0 0 L 0 7 L 4 3.5 Z"
                      Fill="{DynamicResource Menu_Arrow_Brush}"/>
                <Popup x:Name="Popup"
                        Placement="Right"
                        IsOpen="{TemplateBinding IsSubmenuOpen}"
                        AllowsTransparency="True"
                        Focusable="False"
                        PopupAnimation="Fade">
                    <!--Child items stack-->
                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            Background="{DynamicResource Menu_ItemBackground_Brush}"
                            BorderThickness="1" BorderBrush="{DynamicResource Menu_Border_Brush}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource Menu_ItemBackgroundHovered_Brush}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource Menu_ItemBackgroundDisabled_Brush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SubmenuGroupHeaderTemplateKey" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>

                <Separator Name="topSeparator"/>
                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                <Separator Name="bottomSeparator" Grid.Row="2"/>
            </Grid>
        </Border>
    </ControlTemplate>
    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--MENU-->

    <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Name="Border"
                            BorderThickness="1"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Background="{StaticResource Tab_Background_Brush}"
                            BorderBrush="{StaticResource Tab_Border_Brush}">
                        <ContentPresenter Margin="4" HorizontalAlignment="Left" VerticalAlignment="Top" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="CornerRadius" Value="4" />
                            <Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Context Menu-->
    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource BasePanel}">
        <Setter Property="Control.Background" Value="{DynamicResource Menu_Background_Brush}"/>
        <Setter Property="Control.FontSize" Value="{StaticResource FontSizeRegular}"/>
        <Setter Property="Control.FontStyle" Value="Normal"/>
        <Setter Property="Control.FontWeight" Value="Normal"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource Menu_Foreground_Brush}"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource Menu_Border_Brush}"/>
        <Setter Property="Control.Padding" Value="2"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        <Setter Property="ContextMenu.HasDropShadow"
                Value="{StaticResource {x:Static SystemParameters.DropShadowKey}}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <ControlTemplate.Resources>
                        <HierarchicalDataTemplate DataType="{x:Type ctrapi:MenuButton}"
                                                  ItemsSource="{Binding Children}">
                            <TextBlock Text="{Binding Caption}"
                                       Foreground="{DynamicResource Menu_Foreground_Brush}"/>
                        </HierarchicalDataTemplate>
                    </ControlTemplate.Resources>
                    
                    <Border Name="ContextMenuBorder" Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <ScrollViewer Name="ContextMenuScrollViewer" Grid.ColumnSpan="2" Margin="1,0"
                                      Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, 
                                                                                    ResourceId=MenuScrollViewer}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle Name="OpaqueRect" Height="{Binding ElementName=ContextMenuBorder, Path=ActualHeight}"
                                               Width="{Binding ElementName=ContextMenuBorder, Path=ActualWidth}"
                                               Fill="{Binding ElementName=ContextMenuBorder, Path=Background}"/>
                                </Canvas>
                                <Rectangle Fill="{DynamicResource Menu_Background_Brush}"
                                           HorizontalAlignment="Left" Width="28" Margin="1,2"
                                           RadiusX="2" RadiusY="2"/>
                                <Rectangle HorizontalAlignment="Left" Width="1" Margin="29,2,0,2"
                                           Fill="{DynamicResource Menu_Background_Brush}"/>
                                <Rectangle HorizontalAlignment="Left" Width="1" Margin="30,2,0,2"
                                           Fill="{DynamicResource Menu_Background_Brush}"/>
                                <ItemsPresenter Name="ItemsPresenter" Margin="{TemplateBinding Control.Padding}"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="ContextMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=ContextMenuScrollViewer, Path=VerticalOffset}"
                                    Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect"
                                    Value="{Binding ElementName=ContextMenuScrollViewer, Path=HorizontalOffset}" Property="Canvas.Left"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type MenuItem}">
                    <Setter Property="Command" Value="{Binding PressCommand, Converter={c:RelayCommandConverter}}" />
                </Style>
            </Setter.Value>
        </Setter>
        
    </Style>
    <!--Context Menu-->
            
    <Style TargetType="{x:Type TabItem}" x:Key="XTab">
        <Setter Property="Control.Foreground" Value="{DynamicResource Tab_Foreground_Brush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource Tab_HeaderBackground_Brush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource Tab_Border_Brush}"/>
        <Setter Property="FrameworkElement.Margin" Value="0"/>
        <Setter Property="Control.Padding" Value="6,2,6,2"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" BorderThickness="1,1,1,0"
                                Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}" Margin="0">
                            <Border x:Name="innerBorder" BorderThickness="1,1,1,0" 
                                    Background="{DynamicResource Tab_HeaderBackground_Brush}"
                                    BorderBrush="{DynamicResource Tab_HeaderBorder_Brush}" Margin="-1" Opacity="0"/>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" 
                                          Focusable="false"
                                          Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBorderHovered_Brush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBorderHovered_Brush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBorderHovered_Brush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, 
                                                             RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBorderHovered_Brush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled,
                                                             RelativeSource={RelativeSource Self}}"
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56"/>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBackgroundDisabled_Brush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBorderDisabled_Brush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56"/>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBackgroundDisabled_Brush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBorderDisabled_Brush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56"/>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBackgroundDisabled_Brush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBorderDisabled_Brush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56"/>
                            <Setter TargetName="mainBorder" Value="{DynamicResource Tab_HeaderBackgroundDisabled_Brush}" Property="Border.Background"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Control.Foreground" Value="{DynamicResource Tab_HeaderForeground_Brush}"/>
                            <Setter Property="Control.FontWeight" Value="Normal"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Control.Foreground" Value="{DynamicResource Tab_HeaderForegroundHovered_Brush}"/>
                            <Setter Property="Control.FontWeight" Value="Bold"/>
                            <Setter Property="FrameworkElement.Margin" Value="-2,-2,0,-2"/>
                            <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="mainBorder" Property="Border.Background" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}"/>
                            <Setter TargetName="innerBorder" Property="Border.Background" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Control.Foreground" Value="{DynamicResource Tab_HeaderForeground_Brush}"/>
                            <Setter Property="Control.FontWeight" Value="Normal"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="FrameworkElement.Margin" Value="-2,0,-2,-2"/>
                            <Setter Property="Control.Foreground" Value="{DynamicResource Tab_HeaderForegroundHovered_Brush}"/>
                            <Setter Property="Control.FontWeight" Value="Bold"/>
                            <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.Background" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}"/>
                            <Setter TargetName="innerBorder" Property="Border.Background" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Control.Foreground" Value="{DynamicResource Tab_HeaderForeground_Brush}"/>
                            <Setter Property="Control.FontWeight" Value="Normal"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="FrameworkElement.Margin" Value="0,-2,-2,-2"/>
                            <Setter Property="Control.Foreground" Value="{DynamicResource Tab_HeaderForegroundHovered_Brush}"/>
                            <Setter Property="Control.FontWeight" Value="Bold"/>
                            <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.Background" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}"/>
                            <Setter TargetName="innerBorder" Property="Border.Background" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Control.Foreground" Value="{DynamicResource Tab_HeaderForeground_Brush}"/>
                            <Setter Property="Control.FontWeight" Value="Normal"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="FrameworkElement.Margin" Value="-2,-2,-2,0"/>
                            <Setter Property="Control.Foreground" Value="{DynamicResource Tab_HeaderForegroundHovered_Brush}"/>
                            <Setter Property="Control.FontWeight" Value="Bold"/>
                            <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                            <Setter TargetName="mainBorder" Property="Border.Background" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}"/>
                            <Setter TargetName="innerBorder" Property="Border.Background" Value="{DynamicResource Tab_HeaderBackgroundHovered_Brush}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <ToolBar ItemsSource="{Binding TabToolbar.Items}"
                                 Visibility="{Binding TabToolbar.Items.Count, Converter={c:IntegerToVisibility}}"/>
                        <ctr:ActionableContentPresenter DataContext="{Binding}"
                                                        Margin="1 3 1 1"
                                                        Grid.Row="1"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource BasePanel}"
           x:Key="TabSection">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Tab_Border_Brush}"/>
        <Setter Property="ItemsSource" Value="{Binding Tabs}"/>
        <Setter Property="SelectedIndex" Value="{Binding SelectedIndex, Mode=TwoWay}"/>
        <Setter Property="SelectedValue" Value="{Binding SelectedTab, Mode=OneWay}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource XTab}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.Resources>
                            <Style TargetType="{x:Type Button}" x:Key="XButton">
                                <Setter Property="Background" Value="Transparent" />
                                <Setter Property="Foreground" Value="{DynamicResource Tab_HeaderForeground_Brush}"/>
                                <Setter Property="Margin" Value="2 0 0 2"/>
                                <Setter Property="Padding" Value="2"/>
                                <Setter Property="FontSize" Value="{StaticResource FontSizeSmall}"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"
                                                    Width="{Binding Height, RelativeSource={RelativeSource Self}}">
                                                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center"
                                                           Text="{TemplateBinding Content}" />
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource Tab_HeaderBackground_Brush}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Resources>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        
                        <TextBlock Text="{Binding Header}"
                                   Name="HeaderText"
                                   Foreground="{DynamicResource Tab_HeaderForeground_Brush}"
                                   Margin="0 0 15 0"/>
                        <Button Name="CloseButton"
                                Grid.Column="1"
                                FontFamily="Helvetica"
                                Style="{StaticResource XButton}"
                                Content="X" FontWeight="Bold"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource BasePanel}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{DynamicResource Toolbar_Background_Brush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid Name="Grid" Margin="3,1,1,1" SnapsToDevicePixels="true">
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <ToggleButton x:Name="OverflowButton" IsEnabled="{TemplateBinding ToolBar.HasOverflowItems}"
                                          ClickMode="Press" FocusVisualStyle="{x:Null}"
                                          IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, 
                                                              RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Popup x:Name="OverflowPopup" AllowsTransparency="true" Placement="Bottom" StaysOpen="false"
                                   Focusable="false"
                                   PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                   IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                <Border x:Name="ToolBarSubMenuBorder" 
                                        Background="{DynamicResource Toolbar_Background_Brush}" 
                                        BorderBrush="{DynamicResource Toolbar_SubmenuBorder_Brush}"
                                        BorderThickness="1" RenderOptions.ClearTypeHint="Enabled">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                                              Margin="2" WrapWidth="200" Focusable="true"
                                                              KeyboardNavigation.TabNavigation="Cycle" 
                                                              KeyboardNavigation.DirectionalNavigation="Cycle"
                                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" 
                                                              FocusVisualStyle="{x:Null}"/>
                                    </Border>
                            </Popup>
                        </Grid>
                        <Border x:Name="MainPanelBorder" Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Padding="{TemplateBinding Control.Padding}">
                            <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <Thumb x:Name="ToolBarThumb" Style="{StaticResource VerticalDotsThumb}"
                                       Margin="-3,-1,0,0" Width="10" Padding="6,5,1,6"/>
                                <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center"
                                                  VerticalAlignment="Center" Margin="4,0,4,0"
                                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="5,1,2,2"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="HeaderedItemsControl.Header">
                            <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <!--<Trigger SourceName="OverflowPopup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                            <Setter TargetName="Shdw" Property="theme:SystemDropShadowChrome.Color" Value="#71000000"/>
                        </Trigger>-->
                        <Trigger Property="ToolBar.Orientation" Value="Vertical">
                            <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="1,3,1,1"/>
                            <!--<Setter TargetName="OverflowButton" Value="{StaticResource ǐ}" Property="FrameworkElement.Style"/>-->
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="10"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Margin" Value="-1,-3,0,0"/>
                            <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="5,6,6,1"/>
                            <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4"/>
                            <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2"/>
                            <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="OverflowPopup" Property="Popup.Placement" Value="Right"/>
                            <Setter TargetName="MainPanelBorder" Property="FrameworkElement.Margin" Value="0,0,0,11"/>
                            <!--<Setter Value="{StaticResource Ǉ}" Property="Control.Background"/>-->
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="rectangle"
                            SnapsToDevicePixels="True"
                            Background="{DynamicResource ScrollBar_Thumb_Brush}"
                            CornerRadius="4"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Width" Value="14"/>
        <Setter Property="MinWidth" Value="{Binding Width, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="Transparent">
                        <Border Padding="0 4">
                            <Track x:Name="PART_Track" Width="8"                              
                                   IsDirectionReversed="true"
                                   IsEnabled="{TemplateBinding IsMouseOver}">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Opacity="0"  Command="{x:Static ScrollBar.PageUpCommand}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Opacity="0"  Command="{x:Static ScrollBar.PageDownCommand}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource ScrollBarThumb}" />
                                </Track.Thumb>
                            </Track>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="14"/>
                <Setter Property="MinHeight" Value="{Binding Height, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Margin" Value="0 -14 0 0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Border Padding="4 0">
                                <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                    <Track x:Name="PART_Track" Height="8"
                                       IsEnabled="{TemplateBinding IsMouseOver}">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Opacity="0" Command="{x:Static ScrollBar.PageLeftCommand}" />
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Opacity="0" Command="{x:Static ScrollBar.PageRightCommand}" />
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Style="{StaticResource ScrollBarThumb}" />
                                        </Track.Thumb>
                                    </Track>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" 
                                   Grid.Column="1" Grid.Row="1"
                                   Fill="{StaticResource {x:Static SystemColors.ControlBrushKey}}" />
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                CanHorizontallyScroll="False" CanVerticallyScroll="False"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                Content="{TemplateBinding Content}"                                             
                                                Margin="0 0 0 12"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Opacity="0.2"
                                   AutomationProperties.AutomationId="VerticalScrollBar" 
                                   Cursor="Arrow" Grid.Column="1" 
                                   Maximum="{TemplateBinding ScrollableHeight}" 
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" 
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                   ViewportSize="{TemplateBinding ViewportHeight}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" 
                                   Opacity="0.2"
                                   AutomationProperties.AutomationId="HorizontalScrollBar" 
                                   Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" 
                                   Orientation="Horizontal" Grid.Row="1" 
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                   ViewportSize="{TemplateBinding ViewportWidth}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" />
                                    <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="0.2" Duration="0:0:0.3" Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" />
                                    <DoubleAnimation To="0.2" Duration="0:0:0.3" Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    
    
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{DynamicResource Button_Background_Brush}" />
        <Setter Property="Padding" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource Button_Foreground_Brush}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}"                            
                            Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" 
                                   HorizontalAlignment="Center" 
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Button_BackgroundHovered_Brush}" />
                <Setter Property="Foreground" Value="{DynamicResource Button_ForegroundHovered_Brush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="Hoverless">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="SmallControlButton">
        <Setter Property="Background" Value="{DynamicResource Button_Background_Brush}" />
        <Setter Property="Foreground" Value="{DynamicResource Button_Foreground_Brush}"/>
        <Setter Property="Margin" Value="2 0 0 2"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeSmall}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"
                            Width="{Binding Height, RelativeSource={RelativeSource Self}}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Button_BackgroundHovered_Brush}" />
                <Setter Property="Foreground" Value="{DynamicResource Button_ForegroundHovered_Brush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="SystemIconButton" BasedOn="{StaticResource Hoverless}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Padding" Value="4"/>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="WindowControlButton" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{DynamicResource Window_ControlButtonForeground_Brush}"/>
        <Setter Property="Background" Value="{DynamicResource Window_ControlButtonBackground_Brush}"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.5" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Window_ControlButtonBackgroundHovered_Brush}" />
                <Setter Property="Foreground" Value="{DynamicResource Window_ControlButtonForegroundHovered_Brush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="LinkButton">
        <Setter Property="Background" Value="{StaticResource Link_Background_Brush}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{DynamicResource Link_Foreground_Brush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="ContentFrame" BorderBrush="Transparent"
                            BorderThickness="0 0 0 1">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Link_BackgroundHovered_Brush}"/>
                <Setter Property="Foreground" Value="{DynamicResource Link_ForegroundHovered_Brush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Background" Value="{DynamicResource Link_BackgroundDisabled_Brush}"/>
                <Setter Property="Foreground" Value="{DynamicResource Link_ForegroundDisabled_Brush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}"
           x:Key="ActionButton">
        <Setter Property="Background" Value="{DynamicResource Button_Background_Brush}" />
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}"/>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource Button_Foreground_Brush}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}"       
                            BorderThickness="0"
                            Background="{TemplateBinding Background}">
                        <StackPanel Orientation="Horizontal">
                            <ContentPresenter Content="{Binding ButtonGlyph}" Style="{StaticResource GlyphPresenter}"/>
                            <TextBlock VerticalAlignment="Center" 
                                       HorizontalAlignment="Center" 
                                       Text="{Binding Caption}"
                                       FontFamily="{StaticResource FontAwesome}"
                                       Visibility="{Binding Caption, Converter={c:NullableToVisibility}}"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Button_BackgroundHovered_Brush}" />
                <Setter Property="Foreground" Value="{DynamicResource Button_ForegroundHovered_Brush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource Button_BackgroundDisabled_Brush}"/>
                <Setter Property="Foreground" Value="{DynamicResource Button_ForegroundDisabled_Brush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource TreeView_Background_Brush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TreeView_Foreground_Brush}"/>
    </Style>
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                        <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" 
                              Fill="{DynamicResource Toggle_Background_Brush}" 
                              Stroke="{DynamicResource Toggle_Border_Brush}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource Toggle_BackgroundOpened_Brush}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource Toggle_BorderOpened_Brush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource Toggle_Background_Brush}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource Toggle_BackgroundHovered_Brush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource Toggle_BorderHovered_Brush}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource Toggle_BackgroundHovered_Brush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeViewItem}" x:Key="DefaultTreeViewItem">
        <Setter Property="Background" Value="{DynamicResource TreeView_ItemBackground_Brush}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment,
                                                              RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, 
                                                            RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource TreeView_Foreground_Brush}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" ClickMode="Press" 
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                                      Style="{StaticResource ExpandCollapseToggleStyle}"/>
                        <Border x:Name="Bd" Grid.Column="1" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Padding="{TemplateBinding Padding}" 
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource TreeView_ItemBackgroundSelected_Brush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TreeView_ItemForegroundSelected_Brush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource TreeView_ItemBackgroundSelectedInactive_Brush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TreeView_ItemForegroundSelectedInactive_Brush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource TreeView_ItemForegroundDisabled_Brush}"/>
                            <Setter Property="Background" Value="{DynamicResource TreeView_ItemBackgroundDisabled_Brush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="ListBox">
        <Setter Property="Background" Value="{StaticResource Panel_Background_Brush}"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="95" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Name="Border" BorderThickness="0" CornerRadius="2">
                        <Border.Background>
                            <SolidColorBrush Color="{StaticResource Panel_Background}" />
                        </Border.Background>
                        <Border.BorderBrush>
                            <SolidColorBrush Color="Transparent" />
                        </Border.BorderBrush>
                        <ScrollViewer Margin="0" Focusable="false">
                            <StackPanel Margin="2" IsItemsHost="True" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{StaticResource Panel_Background}" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Border" Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Color="Transparent" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource Textbox_Foreground_Brush}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>
    </Style>
    <Style TargetType="{x:Type TextBox}" x:Key="UnderscoredTextBox">
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Textbox_Border_Brush}"/>
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource Textbox_Background_Brush}"/>
        <Setter Property="Foreground" Value="{DynamicResource Textbox_Foreground_Brush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Textbox_Border_Brush}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="2"/>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource Textbox_BorderHovered}" Duration="0:0:0.3" 
                                        Storyboard.TargetProperty="BorderBrush.Color" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation From="{StaticResource Textbox_Border}" Duration="0:0:0.3" 
                                        Storyboard.TargetProperty="BorderBrush.Color" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="DefaultTextBlock">
        <Setter Property="Foreground" Value="{DynamicResource Label_Foreground_Brush}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>
        <Setter Property="Margin" Value="5"/>
    </Style>
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            
            <Border x:Name="Border" 
                    Grid.ColumnSpan="2"
                    CornerRadius="0"
                    Background="{DynamicResource Textbox_Background_Brush}"
                    BorderBrush="{DynamicResource Textbox_Border_Brush}"
                    BorderThickness="1" />
            <Border Grid.Column="0"
                    CornerRadius="0" 
                    Margin="1"
                    Background="{DynamicResource Textbox_Background_Brush}"
                    BorderBrush="{DynamicResource Textbox_Border_Brush}"
                    BorderThickness="0,0,1,0" />
            <Path x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="{DynamicResource ComboBox_Toggle_Brush}"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource Textbox_BackgroundHovered_Brush}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ComboBox_ToggleBackgroundHovered_Brush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource Textbox_BackgroundDisabled_Brush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Textbox_BorderDisabled_Brush}" />
                <Setter Property="Foreground" Value="{DynamicResource Textbox_ForegroundDisabled_Brush}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Textbox_ForegroundDisabled_Brush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{DynamicResource Textbox_Background_Brush}" />
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource Textbox_Foreground_Brush}"/>
        <Setter Property="Background" Value="{DynamicResource Textbox_Background_Brush}"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid Margin="3">
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False" 
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"                                          
                                          Margin="3,3,23,3"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                                 Style="{x:Null}" 
                                 Template="{StaticResource ComboBoxTextBox}" 
                                 HorizontalAlignment="Left" 
                                 VerticalAlignment="Center" 
                                 Margin="3,3,23,3"
                                 Focusable="True" 
                                 Background="{DynamicResource Textbox_Foreground_Brush}"
                                 Foreground="{DynamicResource Textbox_Background_Brush}"
                                 Visibility="Hidden"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup  Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True" 
                                Focusable="False"
                                PopupAnimation="Slide">

                            <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"                
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                        Background="{DynamicResource ComboBox_DropdownBackground_Brush}"
                                        BorderThickness="1"
                                        BorderBrush="{DynamicResource ComboBox_DropdownBorder_Brush}"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Textbox_ForegroundDisabled_Brush}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource ComboBox_DropdownForeground_Brush}"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                            Padding="2"
                            SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" 
                                    Value="{StaticResource ComboBox_BackgroundHoveredBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Textbox_ForegroundDisabled_Brush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Control.Background" Value="{DynamicResource DataGrid_Background_Brush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource DataGrid_Foreground_Brush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource DataGrid_Border_Brush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="DataGrid.RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
                            Padding="{TemplateBinding Control.Padding}">
                        <ScrollViewer Name="DG_ScrollViewer" Focusable="false">
                            <Control.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false"
                                                Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, 
                                                                Path=CellsPanelHorizontalOffset}"
                                                Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type DataGrid}, 
                                                                        ResourceId=DataGridSelectAllButtonStyle}}"
                                                Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, 
                                                                     Path=HeadersVisibility, 
                                                                     Converter={x:Static DataGrid.HeadersVisibilityConverter}, 
                                                                     ConverterParameter={x:Static DataGridHeadersVisibility.All}}"/>
                                        <Border Grid.Column="1" BorderThickness="0 0 0 1"
                                                BorderBrush="{DynamicResource DataGrid_ColumnHeaderBorder_Brush}">
                                            <DataGridColumnHeadersPresenter Name="PART_ColumnHeadersPresenter" Grid.Column="1"
                                                                            Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, 
                                                                                                 Path=HeadersVisibility, 
                                                                                                 Converter={x:Static DataGrid.HeadersVisibilityConverter}, 
                                                                                                 ConverterParameter={x:Static DataGridHeadersVisibility.Column}}"/>
                                        </Border>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="1" Grid.ColumnSpan="2"
                                                                CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
                                        <ScrollBar Name="PART_VerticalScrollBar" Grid.Row="1" Grid.Column="2" Orientation="Vertical"
                                                   Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                                                   ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                                                   Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                                                   Value="{Binding Path=VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, 
                                                                   Mode=OneWay}"/>
                                        <Grid Row="2" Column="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, 
                                                                                  Path=NonFrozenColumnsViewportHorizontalOffset}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar Name="PART_HorizontalScrollBar" Grid.Column="1" Orientation="Horizontal"
                                                       Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                                                       ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                                                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                                                       Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </Control.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Grid>
                        <DataGridColumnHeader Name="PART_FillerColumnHeader" IsHitTestVisible="false"/>
                        <ItemsPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static DataGridColumnHeader.ColumnFloatingHeaderStyleKey}" TargetType="{x:Type Control}">
        <Setter Property="UIElement.Opacity" Value="0.6"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource DataGrid_ColumnHeaderBorder_Brush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}" Padding="{TemplateBinding Control.Padding}"
                            Background="{TemplateBinding Control.Background}">
                        <Grid>
                            <Canvas Name="PART_VisualBrushCanvas" Margin="{TemplateBinding FrameworkElement.Margin}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static DataGridColumnHeader.ColumnHeaderDropSeparatorStyleKey}"
           TargetType="{x:Type Separator}">
        <Setter Property="Control.Background" Value="{DynamicResource DataGrid_ColumnHeaderSeparator_Brush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}" 
                            SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Control.Background" Value="{DynamicResource DataGrid_RowBackground_Brush}"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="DataGridRow.ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Margin="2,0,0,0" VerticalAlignment="Center" Foreground="Red" Text="!"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border x:Name="DGR_Border" Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                        <SelectiveScrollingGrid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding DataGridRow.ItemsPanel}"
                                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" 
                                                      Visibility="{TemplateBinding DataGridRow.DetailsVisibility}"
                                                      SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, 
                                                                                                                     Path=AreRowDetailsFrozen, 
                                                                                                                     Converter={x:Static DataGrid.RowDetailsScrollingConverter}, 
                                                                                                                     ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}}"/>
                            <DataGridRowHeader SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Grid.RowSpan="2"
                                               Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, 
                                                                    Path=HeadersVisibility, 
                                                                    Converter={x:Static DataGrid.HeadersVisibilityConverter}, 
                                                                    ConverterParameter={x:Static DataGridHeadersVisibility.Row}}"/>
                        </SelectiveScrollingGrid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="DataGridRow.IsNewItem" Value="true">
                <Setter Property="FrameworkElement.Margin"
                        Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=NewItemMargin}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type DataGridCellsPresenter}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCellsPresenter}">
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource DataGrid_CellBorder_Brush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="true">
                <Setter Property="Control.Background" Value="{DynamicResource DataGrid_CellBackgroundSelected_Brush}"/>
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource DataGrid_CellForegroundSelected_Brush}"/>
                <Setter Property="Control.BorderBrush" Value="{DynamicResource DataGrid_CellBorderSelected_Brush}"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
                <Setter Property="Control.BorderBrush" Value="{DynamicResource DataGrid_CellBorderSelected_Brush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="DataGridCell.IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource DataGrid_CellBackgroundSelectedInactive_Brush}"/>
                <Setter Property="Control.BorderBrush" Value="{DynamicResource DataGrid_CellBorderSelectedInactive_Brush}"/>
                <Setter Property="Control.Foreground" Value="{DynamicResource DataGrid_CellForegroundSelectedInactive_Brush}"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="{DynamicResource DataGrid_CellForegroundDisabled_Brush}"/>
            </Trigger>
            <!--<MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(framework:FrameworkAppContextSwitches.UseLegacyAccessibilityFeatures)}"
                               Value="false"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ĝ}"/>
            </MultiDataTrigger>-->
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static DataGridComboBoxColumn.TextBlockComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ContentPresenter Margin="1,1,1,1" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                      ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                                      ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" IsHitTestVisible="false"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Control.Padding" Value="0 0 2 0"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Border Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Padding="{TemplateBinding Control.Padding}">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                              RecognizesAccessKey="true"/>
                        </Border>
                        <!--<theme:DataGridHeaderBorder SortDirection="{TemplateBinding DataGridColumnHeader.SortDirection}"
                                        IsHovered="{TemplateBinding UIElement.IsMouseOver}"
                                        IsPressed="{TemplateBinding ButtonBase.IsPressed}"
                                        IsClickable="{TemplateBinding DataGridColumnHeader.CanUserSort}"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        Padding="{TemplateBinding Control.Padding}"
                                        SeparatorVisibility="{TemplateBinding DataGridColumnHeader.SeparatorVisibility}"
                                        SeparatorBrush="{TemplateBinding DataGridColumnHeader.SeparatorBrush}">
                            
                        </theme:DataGridHeaderBorder>-->
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ğ}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ğ}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ğ" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.Width" Value="8"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeWE"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Control.Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ġ" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.Height" Value="8"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeNS"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Control.Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <Border Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Padding="{TemplateBinding Control.Padding}">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" 
                                                  VerticalAlignment="Center"
                                  RecognizesAccessKey="true"/>
                                <Control SnapsToDevicePixels="false"
                                         Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, 
                                                              Path=(Validation.HasError), Converter={c:BooleanVisibilityConverter}}"
                                         Template="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, 
                                                            Path=ValidationErrorTemplate}"/>
                            </StackPanel>
                        </Border>
                        <!--<theme:DataGridHeaderBorder IsSelected="{TemplateBinding DataGridRowHeader.IsRowSelected}"
                                        IsHovered="{TemplateBinding UIElement.IsMouseOver}"
                                        IsPressed="{TemplateBinding ButtonBase.IsPressed}"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        Padding="{TemplateBinding Control.Padding}" Orientation="Horizontal"
                                        SeparatorVisibility="{TemplateBinding DataGridRowHeader.SeparatorVisibility}"
                                        SeparatorBrush="{TemplateBinding DataGridRowHeader.SeparatorBrush}">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                                  RecognizesAccessKey="true"/>
                                <Control SnapsToDevicePixels="false"
                         Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=(Validation.HasError), Converter={StaticResource Ğ}}"
                         Template="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=ValidationErrorTemplate}"/>
                            </StackPanel>
                        </theme:DataGridHeaderBorder>-->
                        <Thumb x:Name="PART_TopHeaderGripper" VerticalAlignment="Top" Style="{StaticResource Ġ}"/>
                        <Thumb x:Name="PART_BottomHeaderGripper" VerticalAlignment="Bottom" Style="{StaticResource Ġ}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>