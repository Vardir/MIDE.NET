<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:MIDE.WPFApp.Styles">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Colors.xaml"/>
        <ResourceDictionary Source="Texts.xaml"/>
        <ResourceDictionary Source="Fonts.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type Control}" x:Key="BasePanel" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{StaticResource PanelBackground}"/>
    </Style>

    <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource BasePanel}">
    </Style>
    <Style TargetType="{x:Type StatusBar}" BasedOn="{StaticResource BasePanel}">
    </Style>
    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{StaticResource PanelBackground}"/>
    </Style>

    <Style x:Key="VerticalDotsThumb" TargetType="{x:Type Thumb}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}" Background="Transparent" SnapsToDevicePixels="true">
                        <Rectangle>
                            <Shape.Fill>
                                <DrawingBrush Viewbox="0,0,4,4" Viewport="0,0,4,4" TileMode="Tile" ViewportUnits="Absolute"
                                              ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <DrawingGroup.Children>
                                                <GeometryDrawing Brush="{StaticResource ForegroundLightBrush}" Geometry="M 1,1 L 1,3 3,3 3,1 Z"/>
                                                <GeometryDrawing Brush="{StaticResource BackgroundDarkBrush}" 
                                                                 Geometry="M 0,0 L 0,2 2,2 2,0 Z"/>
                                            </DrawingGroup.Children>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Shape.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Property="FrameworkElement.Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--MENU-->
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderThickness="1" BorderBrush="{StaticResource BackgroundLightBrush}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1" BorderBrush="{StaticResource BackgroundLightBrush}">
            <Grid Background="{StaticResource BackgroundDarkBrush}">
                <ContentPresenter Margin="6,3,6,3"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <Popup x:Name="Popup"
                       Placement="Bottom"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True"
                       Focusable="False"
                       PopupAnimation="Fade">
                    <!--Menu top-level stack-->
                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            BorderThickness="1" BorderBrush="{StaticResource BackgroundLightBrush}"
                            Background="{StaticResource BackgroundDarkBrush}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" TargetName="Border" Value="{StaticResource BackgroundSemiLightBrush}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource BackgroundSemiLightBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border">
            <ContentPresenter Margin="6,3,6,3" HorizontalAlignment="Stretch"
                              ContentSource="Header" RecognizesAccessKey="True" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{StaticResource BackgroundSemiLightBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource BackgroundLightBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1"
                Padding="0 0 50 0" HorizontalAlignment="Stretch">
            <Grid HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                                  Margin="6,0,6,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon" />
                <Border x:Name="Check"
                        Width="13" Height="13"
                        Visibility="Collapsed"
                        Margin="6,0,6,0"
                        BorderThickness="1" BorderBrush="{StaticResource BackgroundNormalBrush}"
                        Background="{StaticResource BackgroundDarkBrush}">
                    <!--Arrow for sub-items stack-->
                    <Path x:Name="CheckMark"
                          Width="7" Height="7"
                          Visibility="Hidden"
                          SnapsToDevicePixels="False"
                          StrokeThickness="2"
                          Data="M 0 0 L 7 7 M 0 7 L 7 0"
                          Fill="{StaticResource BackgroundLightBrush}"/>
                </Border>
                <ContentPresenter x:Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"
                                  HorizontalAlignment="Stretch"/>
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,0,2"
                           DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{StaticResource BackgroundSemiLightBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                                  Margin="6,0,6,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon" />
                <ContentPresenter x:Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,2,2"
                           DockPanel.Dock="Right" />
                <!--Arrow for sub-items stack-->
                <Path Grid.Column="3"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0 0 L 0 7 L 4 3.5 Z"
                      Fill="{StaticResource BackgroundLightBrush}"/>
                <Popup x:Name="Popup"
                        Placement="Right"
                        IsOpen="{TemplateBinding IsSubmenuOpen}"
                        AllowsTransparency="True"
                        Focusable="False"
                        PopupAnimation="Fade">
                    <!--Child items stack-->
                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            Background="{StaticResource BackgroundDarkBrush}"
                            BorderThickness="1" BorderBrush="{StaticResource BackgroundNormalBrush}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{StaticResource BackgroundNormalBrush}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource BackgroundSemiLightBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--MENU-->
    
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Control.Foreground" Value="{StaticResource ForegroundLightBrush}"/>
        <Setter Property="Control.Background" Value="{StaticResource BackgroundNormalBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource BackgroundLightBrush}"/>
        <Setter Property="FrameworkElement.Margin" Value="0"/>
        <Setter Property="Control.Padding" Value="6,2,6,2"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" BorderThickness="1,1,1,0"
                                Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}" Margin="0">
                            <Border x:Name="innerBorder" BorderThickness="1,1,1,0" 
                                    Background="{StaticResource BackgroundNormalBrush}"
                                    BorderBrush="{StaticResource BackgroundLightBrush}" Margin="-1" Opacity="0"/>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" 
                                          Focusable="false"
                                          Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                          HorizontalAlignment="{Binding HorizontalContentAlignment, 
                                                                        RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                          VerticalAlignment="{Binding VerticalContentAlignment, 
                                                                      RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundLightBrush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundBlueBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundLightBrush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundBlueBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundLightBrush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundBlueBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, 
                                                             RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundLightBrush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundBlueBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56"/>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundNormalBrush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundNormalBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56"/>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundNormalBrush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundNormalBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56"/>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundNormalBrush}" Property="Border.Background"/>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundNormalBrush}" Property="Border.BorderBrush"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56"/>
                            <Setter TargetName="mainBorder" Value="{StaticResource BackgroundNormalBrush}" Property="Border.Background"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="FrameworkElement.Margin" Value="-2,-2,0,-2"/>
                            <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="mainBorder" Property="Border.Background" Value="{StaticResource BackgroundLightBrush}"/>
                            <Setter TargetName="innerBorder" Property="Border.Background" Value="{StaticResource BackgroundLightBrush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="FrameworkElement.Margin" Value="-2,0,-2,-2"/>
                            <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.Background" Value="{StaticResource BackgroundLightBrush}"/>
                            <Setter TargetName="innerBorder" Property="Border.Background" Value="{StaticResource BackgroundLightBrush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="FrameworkElement.Margin" Value="0,-2,-2,-2"/>
                            <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1"/>
                            <Setter TargetName="mainBorder" Property="Border.Background" Value="{StaticResource BackgroundLightBrush}"/>
                            <Setter TargetName="innerBorder" Property="Border.Background" Value="{StaticResource BackgroundLightBrush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, 
                                                             RelativeSource={RelativeSource Self}}" 
                                           Value="true"/>
                                <Condition Binding="{Binding Path=TabStripPlacement, 
                                                             RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="FrameworkElement.Margin" Value="-2,-2,-2,0"/>
                            <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                            <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
                            <Setter TargetName="mainBorder" Property="Border.Background" Value="{StaticResource BackgroundLightBrush}"/>
                            <Setter TargetName="innerBorder" Property="Border.Background" Value="{StaticResource BackgroundLightBrush}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource BasePanel}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundUltraLightBrush}"/>
        <Setter Property="ItemsSource" Value="{Binding Tabs}"/>
        <Setter Property="SelectedIndex" Value="{Binding SelectedIndex}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Header}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToolBar ItemsSource="{Binding TabToolbar.Items}" />
                        <ScrollViewer VerticalScrollBarVisibility="Auto"
                                      HorizontalScrollBarVisibility="Disabled"
                                      Grid.Row="1">
                            <ContentPresenter Content="{Binding ContentContainer}"
                                              Margin="1 3 1 1"
                                              Grid.Row="1"/>
                        </ScrollViewer>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource BasePanel}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Background" Value="{StaticResource BackgroundNormalBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid Name="Grid" Margin="3,1,1,1" SnapsToDevicePixels="true">
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <ToggleButton x:Name="OverflowButton" IsEnabled="{TemplateBinding ToolBar.HasOverflowItems}"
                                          ClickMode="Press" FocusVisualStyle="{x:Null}"
                                          IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, 
                                                              RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Popup x:Name="OverflowPopup" AllowsTransparency="true" Placement="Bottom" StaysOpen="false"
                                   Focusable="false"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                   IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                <Border x:Name="ToolBarSubMenuBorder" 
                                        Background="{StaticResource BackgroundNormalBrush}" 
                                        BorderBrush="{StaticResource BackgroundLightBrush}"
                                        BorderThickness="1" RenderOptions.ClearTypeHint="Enabled">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                                              Margin="2" WrapWidth="200" Focusable="true"
                                                              KeyboardNavigation.TabNavigation="Cycle" 
                                                              KeyboardNavigation.DirectionalNavigation="Cycle"
                                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" 
                                                              FocusVisualStyle="{x:Null}"/>
                                    </Border>
                            </Popup>
                        </Grid>
                        <Border x:Name="MainPanelBorder" Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Padding="{TemplateBinding Control.Padding}">
                            <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <Thumb x:Name="ToolBarThumb" Style="{StaticResource VerticalDotsThumb}"
                                       Margin="-3,-1,0,0" Width="10" Padding="6,5,1,6"/>
                                <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center"
                                                  VerticalAlignment="Center" Margin="4,0,4,0"
                                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="HeaderedItemsControl.Header">
                            <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <!--<Trigger SourceName="OverflowPopup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                            <Setter TargetName="Shdw" Property="theme:SystemDropShadowChrome.Color" Value="#71000000"/>
                        </Trigger>-->
                        <Trigger Property="ToolBar.Orientation" Value="Vertical">
                            <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="1,3,1,1"/>
                            <!--<Setter TargetName="OverflowButton" Value="{StaticResource ǐ}" Property="FrameworkElement.Style"/>-->
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="10"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Margin" Value="-1,-3,0,0"/>
                            <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="5,6,6,1"/>
                            <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4"/>
                            <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2"/>
                            <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="OverflowPopup" Property="Popup.Placement" Value="Right"/>
                            <Setter TargetName="MainPanelBorder" Property="FrameworkElement.Margin" Value="0,0,0,11"/>
                            <!--<Setter Value="{StaticResource Ǉ}" Property="Control.Background"/>-->
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>